import streamlit as st
import pandas as pd
from io import BytesIO
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(
    page_title="–ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω",
    layout="wide",
    page_icon="üìÖ"
)

# –°—Ç–∏–ª–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
st.markdown("""
<style>
@media (max-width: 768px) {
    /* –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stTextInput input, .stSelectbox select {
        font-size: 14px !important;
    }
    .stButton button {
        width: 100% !important;
    }
    .stDataFrame {
        font-size: 12px !important;
    }
    .stTabs [role=tablist] button {
        padding: 0.25rem 0.5rem !important;
        font-size: 12px !important;
    }
}
</style>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PWA –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
def create_pwa_manifest():
    manifest = {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Å–º–µ–Ω",
        "short_name": "–ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω",
        "description": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        "start_url": ".",
        "display": "standalone",
        "background_color": "#ffffff",
        "theme_color": "#4f8bf9",
        "icons": [
            {
                "src": "https://cdn-icons-png.flaticon.com/512/3652/3652191.png",
                "sizes": "192x192",
                "type": "image/png"
            }
        ]
    }
    return manifest

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üìÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Å–º–µ–Ω –ø–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

tab1, tab2 = st.tabs(["üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel", "üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"])

# --------- –¢–∞–± "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel" ----------
with tab1:
    st.markdown("""
    **–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.**

    –¢—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
    - –°—Ç–æ–ª–±–µ—Ü `–°–æ—Ç—Ä—É–¥–Ω–∏–∫` (–∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)
    - –°—Ç–æ–ª–±—Ü—ã —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏: `–ü–Ω`, `–í—Ç`, `–°—Ä`, `–ß—Ç`, `–ü—Ç`, `–°–±`, `–í—Å`
    - –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∞—Ö: 
        - `7-15` (—É—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞)
        - `15-23` (–≤–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞)
        - `–≤—ã—Ö–æ–¥–Ω–æ–π`
    """)

    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel", type=["xlsx"], key="file_uploader")

    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file)
            required_columns = ['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'] + ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            
            if all(col in df.columns for col in required_columns):
                st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
                st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
                st.dataframe(df.head())
            else:
                st.error("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# --------- –¢–∞–± "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" ----------
with tab2:
    st.markdown("**–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∏ –∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö**")

    num_people = st.number_input(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", 
        min_value=1, 
        max_value=50, 
        value=1,
        help="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä–∞—Ñ–∏–∫"
    )

    data = []
    for i in range(num_people):
        with st.expander(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {i+1}", expanded=True if i == 0 else False):
            name = st.text_input(f"–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", key=f"name_{i}")
            
            cols = st.columns(7)
            days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            day_data = {}
            
            for j, day in enumerate(days):
                with cols[j]:
                    day_data[day] = st.selectbox(
                        day,
                        options=["", "7-15", "15-23", "–≤—ã—Ö–æ–¥–Ω–æ–π"],
                        key=f"{day}_{i}"
                    )
            
            if name:
                row = {"–°–æ—Ç—Ä—É–¥–Ω–∏–∫": name, **day_data}
                data.append(row)

    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", key="generate_btn"):
        if data:
            df = pd.DataFrame(data)
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            st.warning("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

# --------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–æ–±—â–∞—è —á–∞—Å—Ç—å) ----------
if 'df' in locals() and not df.empty:
    st.subheader("üìä –ò—Ç–æ–≥–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    schedule = []
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    
    for day in days:
        morning_shift = df[df[day] == "7-15"]['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'].tolist()
        evening_shift = df[df[day] == "15-23"]['–°–æ—Ç—Ä—É–¥–Ω–∏–∫'].tolist()
        
        schedule.append({
            "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏": day,
            "–£—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ (7-15)": ", ".join(morning_shift) if morning_shift else "‚Äî",
            "–í–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ (15-23)": ", ".join(evening_shift) if evening_shift else "‚Äî"
        })
    
    schedule_df = pd.DataFrame(schedule)
    st.dataframe(schedule_df, use_container_width=True)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        schedule_df.to_excel(writer, index=False, sheet_name='–ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω')
    
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (Excel)",
        data=output.getvalue(),
        file_name="–≥—Ä–∞—Ñ–∏–∫_—Å–º–µ–Ω.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# PWA —É—Å—Ç–∞–Ω–æ–≤–∫–∞
st.markdown("""
<script>
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä PWA
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/service-worker.js')
            .then(registration => {
                console.log('ServiceWorker registration successful');
            })
            .catch(err => {
                console.log('ServiceWorker registration failed: ', err);
            });
    });
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –∫–æ–≥–¥–∞ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
let deferredPrompt;
const addBtn = document.createElement('button');
addBtn.style.display = 'none';
document.body.appendChild(addBtn);

window.addEventListener('beforeinstallprompt', (e) => {
    e.preventDefault();
    deferredPrompt = e;
    addBtn.style.display = 'block';
    
    addBtn.addEventListener('click', () => {
        addBtn.style.display = 'none';
        deferredPrompt.prompt();
        
        deferredPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
                console.log('User accepted the install prompt');
            } else {
                console.log('User dismissed the install prompt');
            }
            deferredPrompt = null;
        });
    });
});
</script>
""", unsafe_allow_html=True)

# –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
st.button("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", key="install_btn", help="–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
